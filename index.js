require('dotenv').config();
const { Bot, Keyboard, InlineKeyboard, GrammyError, HttpError } = require('grammy');
const bot = new Bot(process.env.BOT_API_KEY);
const { getRandomQuestion, getCorrectAnswer } = require('./utils.js')

bot.command('start', async (ctx) => {
    const startKeyboard = new Keyboard()
        .text('JavaScript')
        .text('HTML')
        .row()
        .text('CSS')
        .text('React')
        // .text('General Issues')
        .resized();
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é! \n –ù–µ –ø–µ—Ä–µ–¥—É–º–∞–ª ?');
    await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? \n –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–µ–Ω–Ω—é üëá ', {
        reply_markup: startKeyboard
    })
});






bot.hears(['JavaScript', 'CSS', 'React', 'HTML'], async (ctx) => {
    const topic = ctx.message.text.toLowerCase();
    const question = getRandomQuestion(topic);
    let inlineKeyboard;
    if (question.hasOptions) {
        const buttonRows = question.options.map((option) => {
            return [InlineKeyboard.text(option.text, JSON.stringify({
                type: `${topic}-option`,
                isCorrect: option.isCorrect,
                questionId: question.id
            }))]
        });
        inlineKeyboard = InlineKeyboard.from(buttonRows);
    } else {
        inlineKeyboard = new InlineKeyboard().text('–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç', JSON.stringify({
            type: topic,
            questionId: question.id
        }));
    }


    ctx.reply(question.text, {
        reply_markup: inlineKeyboard
    })
});







bot.on('callback_query:data', async (ctx) => {
    const callbackData = JSON.parse(ctx.callbackQuery.data);
    if (!callbackData.type.includes('option')) {
        const answer = getCorrectAnswer(callbackData.type, callbackData.questionId)
        await ctx.reply(answer, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
        await ctx.answerCallbackQuery();
        return;
    };
    if (callbackData.isCorrect) {
        await ctx.reply('–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π ‚úÖ');
        await ctx.answerCallbackQuery();
        return;
    }
    const answer = getCorrectAnswer(callbackData.type.split('-')[0], callbackData.questionId);
    await ctx.reply(`–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π ‚ùå, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${answer}`);
    await ctx.answerCallbackQuery();
});







bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
        console.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:", e.description);
    } else if (e instanceof HttpError) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:", e);
    } else {
        console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
    }
});

bot.start();