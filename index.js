require('dotenv').config();
const { Bot, Keyboard, InlineKeyboard, GrammyError, HttpError } = require('grammy');



const bot = new Bot(process.env.BOT_API_KEY);


bot.command('start', async (ctx) => {
    const startKeyboard = new Keyboard()
        .text('JavaScript')
        .text('HTML')
        .row()
        .text('CSS')
        .text('React')
        // .text('General Issues')
        .resized();
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é! \n –ù–µ –ø–µ—Ä–µ–¥—É–º–∞–ª ?');
    await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? \n –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–µ–Ω–Ω—é üëá ', {
        reply_markup: startKeyboard
    })
});

bot.hears(['JavaScript', 'CSS', 'React', 'General Issues'], async (ctx) => {
    const inlineKeyboard = new InlineKeyboard().text('–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç', JSON.stringify({
        type: ctx.message.text,
        questionId:1
    })).text('–û—Ç–º–µ–Ω–∏—Ç—å', 'cancel')
    ctx.reply(`–ß—Ç–æ —Ç–∞–∫–æ–µ ${ctx.message.text}?`, {
        reply_markup: inlineKeyboard
    })
});

bot.on('callback_query:data', async (ctx) => {
    if (ctx.callbackQuery.data === 'cancel') {
        await ctx.reply('–û—Ç–º–µ–Ω–µ–Ω–æ');
        await ctx.answerCallbackQuery();
        return;
    };
    const callbackData = JSON.parse(ctx.callbackQuery.data);
    await ctx.reply(`${callbackData.type} - —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞.`);
    await ctx.answerCallbackQuery();
})

bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
        console.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:", e.description);
    } else if (e instanceof HttpError) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:", e);
    } else {
        console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
    }
});

bot.start();