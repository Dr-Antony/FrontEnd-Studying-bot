require('dotenv').config();
const { Bot, session, Keyboard, InlineKeyboard, GrammyError, HttpError } = require('grammy');
const { freeStorage } = require("@grammyjs/storage-free");
const { Random } = require('random-js');


const bot = new Bot(process.env.BOT_API_KEY);
const { getRandomQuestion, getCorrectAnswer } = require('./utils.js')

const random = new Random();
const questions = require('./questions.json');




const adminId = 569441073;





bot.use(session({
    initial: () => ({
        totalQuestionsCount: 0,
        correctAnswer: 0,
        incorrectAnswer: 0,

    }),
    storage: freeStorage(bot.token),
}));

const removeSessionData = ()=>{
    ctx.session = {
        totalQuestionsCount: 0,
        correctAnswer: 0,
        incorrectAnswer: 0,
    }
}









bot.command('start', async (ctx) => {
    console.log(ctx.message)
    if (ctx.message.from.id === adminId) {
        await ctx.reply('–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ. –ö–∞–∫–∏–µ –±—É–¥—É—Ç —É–∫–∞–∑–∞–Ω–∏—è ?');
    }
    const startKeyboard = new Keyboard()
        .text('JavaScript')
        .text('HTML')
        .row()
        .text('CSS')
        .text('React')
        .row()
        .text('Random question')
        .row()
        .text('–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã')
        .resized();
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é!');
    await ctx.reply('–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? \n –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–µ–Ω–Ω—é üëá ', {
        reply_markup: startKeyboard
    })
});




///////////////////////////////////////////–û–ë–†–ê–ë–û–¢–ö–ê –í–û–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í////////////////////////////////////////////////////////

bot.hears(['JavaScript', 'CSS', 'React', 'HTML', 'Random question'], async (ctx) => {
    let topic = ctx.message.text.toLowerCase();
    if (topic === 'random question') {
        const various = Object.keys(questions);
        const randomTopic = various[random.integer(0, various.length - 1)];
        topic = randomTopic;
    };


    const question = getRandomQuestion(topic);
    let inlineKeyboard;
    if (question.hasOptions) {
        ctx.session.totalQuestionsCount++
        const buttonRows = question.options.map((option) => {
            return [InlineKeyboard.text(option.text, JSON.stringify({
                type: `${topic}-option`,
                isCorrect: option.isCorrect,
                questionId: question.id
            }))]
        });
        inlineKeyboard = InlineKeyboard.from(buttonRows);
    } else {
        inlineKeyboard = new InlineKeyboard().text('–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç', JSON.stringify({
            type: topic,
            questionId: question.id
        }));
    }


    await ctx.reply(question.text, {
        reply_markup: inlineKeyboard
    })
});







bot.on('callback_query:data', async (ctx) => {
    const callbackData = JSON.parse(ctx.callbackQuery.data);
    console.log(callbackData);

    if (callbackData.removeSession) {
        await ctx.reply('–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã!')
        await ctx.answerCallbackQuery();
    }




    if (!callbackData.type.includes('option')) {
        const answer = getCorrectAnswer(callbackData.type, callbackData.questionId)
        await ctx.reply(answer, {
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
        await ctx.answerCallbackQuery();
        return;
    };
    if (callbackData.isCorrect) {
        ctx.session.correctAnswer++
        await ctx.reply('–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π ‚úÖ');
        await ctx.answerCallbackQuery();
        return;
    }

    const answer = getCorrectAnswer(callbackData.type.split('-')[0], callbackData.questionId);
    ctx.session.incorrectAnswer++
    await ctx.reply(`–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π ‚ùå, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${answer}`);
    await ctx.answerCallbackQuery();
});


///////////////////////////////////////////.............................////////////////////////////////////////////////////////




bot.hears('–ú–æ–∏ –æ—Ç–≤–µ—Ç—ã', async (ctx) => {

    const { totalQuestionsCount, correctAnswer, incorrectAnswer } = ctx.session

    const response = `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${totalQuestionsCount};
                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswer}
                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${incorrectAnswer}
                    –ü—Ä–æ—Ü–µ–Ω—Ç –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${correctAnswer / totalQuestionsCount * 100}%
                    `;

                    const inlineKeyboard = new InlineKeyboard().text('–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤', JSON.stringify({
                        removeSession:true
                    }))
                    await ctx.reply(response, {
                        reply_markup: inlineKeyboard
                    })
})

// bot.on('callback_query:data', async (ctx) => {
//     const callbackData = JSON.parse(ctx.callbackQuery.data);
//     console.log(callbackData)
//     if (callbackData.removeSession) {
//         ctx.session.totalQuestionsCount = 0;
//         ctx.session.correctAnswer = 0;
//         ctx.session.incorrectAnswer = 0;
//         await ctx.reply('–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã!')
//         await ctx.answerCallbackQuery();
//     }
// });
















bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${ctx.update.update_id}:`);
    const e = err.error;
    if (e instanceof GrammyError) {
        console.error("–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ:", e.description);
    } else if (e instanceof HttpError) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å Telegram:", e);
    } else {
        console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:", e);
    }
});

bot.start();